[{"C:\\Users\\appsr\\Desktop\\tutorials\\REACT JS\\StudentCourses\\src\\reportWebVitals.js":"1","C:\\Users\\appsr\\Desktop\\tutorials\\REACT JS\\StudentCourses\\src\\components\\student.js":"2"},{"size":375,"mtime":1610030939397,"results":"3","hashOfConfig":"4"},{"size":7809,"mtime":1610034751110,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"k8l14m",{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"C:\\Users\\appsr\\Desktop\\tutorials\\REACT JS\\StudentCourses\\src\\reportWebVitals.js",[],"C:\\Users\\appsr\\Desktop\\tutorials\\REACT JS\\StudentCourses\\src\\components\\student.js",["11"],"import \"./student.css\";\r\nimport { DropdownButton } from \"react-bootstrap\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nfunction Students() {\r\n  const [courses, setCourses] = useState([]);\r\n  const [allStudents, setAllStudents] = useState([]);\r\n  const [students, setStudents] = useState([]);\r\n  const [inputShow, setInputShow] = useState(false);\r\n  const [studentInputShow, setStudentInputShow] = useState(false);\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [inputTextStudent, setInputTextStudent] = useState(\"\");\r\n  const [selectedCourse, setSelectedCourse] = useState(null);\r\n  const [selectedStudent, setSelectedStudent] = useState(null);\r\n\r\n  //load course and student details from cache storage\r\n  useEffect(() => {\r\n    let presavedCourses = localStorage.getItem(\"courses\");\r\n    let presavedStudents = localStorage.getItem(\"students\");\r\n    if (presavedCourses) {\r\n      //handle invalid json parsing error\r\n      try {\r\n        setCourses(JSON.parse(presavedCourses));\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    if (presavedStudents) {\r\n      //handle invalid json parsing error\r\n      try {\r\n        setAllStudents(JSON.parse(presavedStudents));\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  }, []);\r\n  // create new course\r\n\r\n  // map students dropdown values with course details\r\n\r\n  useEffect(() => {\r\n    if (selectedCourse) {\r\n      console.log(selectedCourse);\r\n      let _tempStudents = [...allStudents];\r\n      console.log(_tempStudents);\r\n      let _holdStudents = [];\r\n      for (const student of _tempStudents) {\r\n        if (selectedCourse.id === student.course) {\r\n          _holdStudents.push(student);\r\n        }\r\n      }\r\n      setStudents(_holdStudents);\r\n    }\r\n  }, [selectedCourse]);\r\n\r\n  const addCourse = () => {\r\n    if (inputText) {\r\n      let _tempCourses = [...courses];\r\n      _tempCourses.push({ name: inputText, id: Date.now() });\r\n      localStorage.setItem(\"courses\", JSON.stringify(_tempCourses));\r\n      setCourses(_tempCourses);\r\n      setInputShow(false);\r\n      setInputText(\"\");\r\n    } else {\r\n      alert(\"Course name cannot be empty\");\r\n    }\r\n  };\r\n  const addStudent = () => {\r\n    if (inputTextStudent) {\r\n      let _tempStudents = [...students];\r\n      let newStudent = {\r\n        name: inputTextStudent,\r\n        id: Date.now(),\r\n        course: selectedCourse.id,\r\n      };\r\n      _tempStudents.push(newStudent);\r\n      localStorage.setItem(\"students\", JSON.stringify(_tempStudents));\r\n      let _tempAllStudents = [...allStudents];\r\n      _tempAllStudents.push(newStudent);\r\n      setAllStudents(_tempAllStudents);\r\n      setStudents(_tempStudents);\r\n      setInputTextStudent(\"\");\r\n      setStudentInputShow(false);\r\n    } else {\r\n      alert(\"Student name cannot be empty\");\r\n    }\r\n  };\r\n  const cancel = () => {\r\n    setInputShow(false);\r\n    setInputText(\"\");\r\n    setInputTextStudent(\"\");\r\n    setStudentInputShow(false);\r\n  };\r\n  return (\r\n    <section className=\"StudentCourses\">\r\n      <div className=\"row title\">\r\n        <h1>Course and Students Maintenance</h1>\r\n      </div>\r\n      <div className=\"row content\">\r\n        <div className=\"col-lg-6 label\">\r\n          <h3>Courses</h3>\r\n        </div>\r\n        <div className=\"col-lg-6\">\r\n          <DropdownButton\r\n            id=\"dropdown-basic-button\"\r\n            title={`${selectedCourse ? selectedCourse.name : \"Courses\"}`}\r\n          >\r\n            {courses.length ? (\r\n              courses.map((course) => (\r\n                <Dropdown.Item\r\n                  key={course.id}\r\n                  id={course.id}\r\n                  onClick={(e) => {\r\n                    setSelectedCourse(course);\r\n                    e.preventDefault();\r\n                  }}\r\n                >\r\n                  {course.name}\r\n                </Dropdown.Item>\r\n              ))\r\n            ) : (\r\n              <Dropdown.Item id=\"disabled\" disabled>\r\n                No Courses were added\r\n              </Dropdown.Item>\r\n            )}\r\n          </DropdownButton>\r\n\r\n          <Button\r\n            id=\"add-button\"\r\n            as=\"input\"\r\n            type=\"button\"\r\n            value=\"Add New Course\"\r\n            onClick={() => {\r\n              setInputShow(true);\r\n            }}\r\n          />\r\n          {inputShow && (\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-4\"></div>\r\n              <div className=\"col-lg-4\">\r\n                <Form.Control\r\n                  id=\"datainput\"\r\n                  type=\"input\"\r\n                  placeholder=\"Course Name\"\r\n                  onInput={(e) => {\r\n                    setInputText(e.target.value);\r\n                  }}\r\n                />\r\n              </div>\r\n              {inputText && (\r\n                <div className=\"col-lg-4 icons\">\r\n                  <button className=\"tick-btn\" onClick={() => addCourse()}>\r\n                    <i className=\"fa fa-check fa-2x\" aria-hidden=\"true\"></i>\r\n                  </button>\r\n                  <button className=\"cross-btn\" onClick={() => cancel()}>\r\n                    <i className=\"fa fa-times fa-2x\" aria-hidden=\"true\"></i>\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"row content\">\r\n        <div className=\"col-lg-6 label\">\r\n          <h3>Students</h3>\r\n        </div>\r\n        {selectedCourse && (\r\n          <div className=\"col-lg-6\">\r\n            <DropdownButton\r\n              id=\"dropdown-basic-button\"\r\n              title={selectedStudent ?? \"Students\"}\r\n            >\r\n              {students.length ? (\r\n                students.map((student) => (\r\n                  <Dropdown.Item\r\n                    key={student.id}\r\n                    id={student.id}\r\n                    onClick={(e) => {\r\n                      setSelectedStudent(student.name);\r\n\r\n                      e.preventDefault();\r\n                    }}\r\n                  >\r\n                    {student.name}\r\n                  </Dropdown.Item>\r\n                ))\r\n              ) : (\r\n                <Dropdown.Item id=\"disabled\" disabled>\r\n                  No Students were added\r\n                </Dropdown.Item>\r\n              )}\r\n            </DropdownButton>\r\n\r\n            <Button\r\n              id=\"add-button\"\r\n              as=\"input\"\r\n              type=\"button\"\r\n              value=\"Add Student\"\r\n              onClick={() => {\r\n                setStudentInputShow(true);\r\n              }}\r\n            />\r\n\r\n            {studentInputShow && (\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-4\"></div>\r\n                <div className=\"col-lg-4\">\r\n                  <Form.Control\r\n                    id=\"datainput\"\r\n                    type=\"input\"\r\n                    placeholder=\"Student Name\"\r\n                    onInput={(e) => {\r\n                      setInputTextStudent(e.target.value);\r\n                    }}\r\n                  />\r\n                </div>\r\n                {inputTextStudent && (\r\n                  <div className=\"col-lg-4 icons\">\r\n                    <button className=\"tick-btn\" onClick={() => addStudent()}>\r\n                      <i className=\"fa fa-check fa-2x\" aria-hidden=\"true\"></i>\r\n                    </button>\r\n                    <button className=\"cross-btn\" onClick={() => cancel()}>\r\n                      <i className=\"fa fa-times fa-2x\" aria-hidden=\"true\"></i>\r\n                    </button>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Students;\r\n",{"ruleId":"12","severity":1,"message":"13","line":57,"column":6,"nodeType":"14","endLine":57,"endColumn":22,"suggestions":"15"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'allStudents'. Either include it or remove the dependency array.","ArrayExpression",["16"],{"desc":"17","fix":"18"},"Update the dependencies array to be: [allStudents, selectedCourse]",{"range":"19","text":"20"},[1903,1919],"[allStudents, selectedCourse]"]